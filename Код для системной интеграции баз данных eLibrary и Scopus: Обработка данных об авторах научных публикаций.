{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOaacDfTRBI4YKu3dgD2lA4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/anastasiasitalova7/-web--/blob/main/%D0%9A%D0%BE%D0%B4%20%D0%B4%D0%BB%D1%8F%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%BD%D0%BE%D0%B9%20%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B1%D0%B0%D0%B7%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85%20eLibrary%20%D0%B8%20Scopus%3A%20%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85%20%D0%BE%D0%B1%20%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B0%D1%85%20%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D1%8B%D1%85%20%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B9.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zxTB9nDxufPd",
        "outputId": "7d4b1fc9-1b6c-4539-a9b4-7213b70a6137"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Данные успешно сохранены в merged_data.csv\n",
            "Данные успешно обновлены в merged_data.csv, все точки удалены.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-d946cc36b755>:182: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
            "  merged_data = merged_data.applymap(remove_dots)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Загрузка данных из CSV файлов\n",
        "file1 = 'eliball2019_2024_202410171542.csv'\n",
        "file2 = 'scopus_authors.csv'\n",
        "\n",
        "# Чтение файлов\n",
        "data1 = pd.read_csv(file1, delimiter=';')\n",
        "data2 = pd.read_csv(file2)\n",
        "\n",
        "# Заменяем \"undefined\" на \"I.\" в колонке 'full_name', если встречается \"Bogachkov\"\n",
        "data2['full_name'] = data2['full_name'].apply(lambda x: x.replace('undefined', 'I.') if isinstance(x, str) and 'Bogachkov' in x else x)\n",
        "\n",
        "# Функция для разделения инициалов и полных имен\n",
        "def split_names(name):\n",
        "    if pd.isna(name):  # Проверка на NaN\n",
        "        return '', ''  # Возвращаем пустые строки, если значение NaN\n",
        "\n",
        "    # Если в имени два слова, разделённых пробелом\n",
        "    if ' ' in name and len(name.split()) == 2:\n",
        "        имя, отчество = name.split(' ')\n",
        "        # Проверка на наличие точки в конце первого слова\n",
        "        if not имя.endswith('.'):\n",
        "            имя = имя.strip() + '.'  # Добавляем точку после первого слова\n",
        "        отчество = отчество.strip()\n",
        "    else:\n",
        "        parts = name.split('.')\n",
        "        if len(parts) > 1:\n",
        "            # Если есть инициалы\n",
        "            имя = parts[0].strip()\n",
        "            if not имя.endswith('.'):\n",
        "                имя += '.'  # Добавляем точку, если её нет\n",
        "            отчество = parts[1].strip()\n",
        "        else:\n",
        "            # Если имя и отчество записаны через пробел\n",
        "            name_parts = name.split()\n",
        "            имя = name_parts[0] if len(name_parts) > 0 else ''\n",
        "            отчество = ' '.join(name_parts[1:]) if len(name_parts) > 1 else ''\n",
        "\n",
        "    return имя, отчество\n",
        "\n",
        "# Извлечение нужных колонок из первого файла\n",
        "data1['Имя'], data1['Отчество'] = zip(*data1['initials'].apply(split_names))\n",
        "filtered_data1 = data1[['lastname', 'Имя', 'Отчество', 'orgname']]\n",
        "filtered_data1.columns = ['Фамилия', 'Имя', 'Отчество', 'Университет']\n",
        "\n",
        "# Функция для разделения полного имени с учетом различных форматов\n",
        "def split_full_name(full_name):\n",
        "    if pd.isna(full_name):  # Проверка на NaN\n",
        "        return '', '', ''  # Возвращаем пустые строки, если значение NaN\n",
        "\n",
        "    # Убираем лишние пробелы и разделяем по запятой\n",
        "    parts = [part.strip() for part in full_name.split(',')]\n",
        "\n",
        "    if len(parts) == 2:\n",
        "        # Если две части: \"Фамилия, Имя Отчество\" или \"Имя Отчество, Фамилия\"\n",
        "        имя_отчество = parts[1].split()\n",
        "        фамилия = parts[0]\n",
        "        имя = имя_отчество[0] if имя_отчество else ''\n",
        "        отчество = ' '.join(имя_отчество[1:]) if len(имя_отчество) > 1 else ''\n",
        "    elif len(parts) == 1:\n",
        "        # Если только одна часть\n",
        "        имя_отчество = parts[0].split()\n",
        "        if len(имя_отчество) == 3:\n",
        "            # Если три части: \"Отчество Фамилия Имя\"\n",
        "            фамилия = имя_отчество[1]\n",
        "            имя = имя_отчество[2]\n",
        "            отчество = имя_отчество[0]\n",
        "        elif len(имя_отчество) == 2:\n",
        "            # Если две части: \"Фамилия Имя\" или \"Имя Отчество\"\n",
        "            фамилия = имя_отчество[0]\n",
        "            имя = имя_отчество[1]\n",
        "            отчество = ''\n",
        "        else:\n",
        "            фамилия = имя_отчество[-1] if имя_отчество else ''\n",
        "            имя = имя_отчество[-2] if len(имя_отчество) > 1 else ''\n",
        "            отчество = ' '.join(имя_отчество[:-2]) if len(имя_отчество) > 2 else ''\n",
        "    else:\n",
        "        фамилия, имя, отчество = '', '', ''\n",
        "\n",
        "    return фамилия, имя, отчество\n",
        "\n",
        "# Применение функции к столбцу 'full_name' во втором файле\n",
        "data2[['Фамилия', 'Имя', 'Отчество']] = data2['full_name'].apply(split_full_name).apply(pd.Series)\n",
        "\n",
        "# Извлечение нужных колонок из второго файла\n",
        "filtered_data2 = data2[['Фамилия', 'Имя', 'Отчество', 'affiliated_institution_name']]\n",
        "filtered_data2.columns = ['Фамилия', 'Имя', 'Отчество', 'Университет']\n",
        "\n",
        "# Фильтрация данных: исключаем записи, где full_name пустые, а значение только в affiliated_institution_name\n",
        "filtered_data2 = filtered_data2[~(filtered_data2['Фамилия'].isna() & filtered_data2['Имя'].isna() & filtered_data2['Университет'].notna())]\n",
        "\n",
        "# Также исключаем записи, где full_name пустые, а значение только в affiliated_institution_name\n",
        "filtered_data2 = filtered_data2[~(data2['full_name'].isna() & data2['affiliated_institution_name'].notna())]\n",
        "\n",
        "# Объединение данных\n",
        "merged_data = pd.concat([filtered_data1, filtered_data2], ignore_index=True)\n",
        "\n",
        "# Изменение порядка для специальных случаев\n",
        "def reorder_special_cases(row):\n",
        "    if (row['Фамилия'] == 'Vyacheslav' and row['Имя'] == 'G.' and row['Отчество'] == 'Churankin'):\n",
        "        return pd.Series(['Churankin', 'Vyacheslav', 'G.', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Valery' and row['Имя'] == 'V.' and row['Отчество'] == 'Derkach'):\n",
        "        return pd.Series(['Derkach', 'Valery', 'V.', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Yu Tyumentseva' and row['Имя'] == 'E.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Tyumentseva', 'E.', 'Yu', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Yu Yudenko' and row['Имя'] == 'M.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Yudenko', 'M.', 'Yu', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Yu Marchinskiy' and row['Имя'] == 'I.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Marchinskiy', 'I.', 'Yu', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Yu Skuba' and row['Имя'] == 'P.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Skuba', 'P.', 'Yu', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Yu Scuba' and row['Имя'] == 'P.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Scuba', 'P.', 'Yu', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Kh Sadvakasov' and row['Имя'] == 'D.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Sadvakasov', 'D.', 'Kh', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Yu Bulgakova' and row['Имя'] == 'I.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Bulgakova', 'I.', 'Yu', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Valery' and row['Имя'] == 'T.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['T.', 'Valery', '', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Kirovskaya Ia' and row['Имя'] == 'null' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Kirovskaya', 'I.', 'A.', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Valentin' and row['Имя'] == 'Vasilevskiy' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Vasilevskiy', 'Valentin', '', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Sergey' and row['Имя'] == 'Zavyalov' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Zavyalov', 'Sergey', '', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Sergey' and row['Имя'] == 'Koryakin' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Koryakin', 'Sergey', '', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Samokhvalova Anastasia' and row['Имя'] == 'Y.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Samokhvalova', 'Anastasia', 'Y.', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'V.Grigoriev' and row['Имя'] == 'A.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Grigoriev', 'A.', 'V.', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Aleksandrova' and row['Имя'] == 'Trukhina' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Aleksandrova,Trukhina', '', '', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Kabanets' and row['Имя'] == 'Aexsander' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Kabanets', 'Alexsander', '', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Yur’yevich' and row['Имя'] == 'Nosov' and row['Отчество'] == 'Evgeniy'):\n",
        "        return pd.Series(['Nosov', 'Evgeniy', 'Yur’yevich', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Savitovich' and row['Имя'] == 'Tegzhanov' and row['Отчество'] == 'Ablay Khan'):\n",
        "        return pd.Series(['Tegzhanov', 'Ablaykhan', 'Savitovich', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Pavlovich' and row['Имя'] == 'Bolshtyanskiy' and row['Отчество'] == 'Aleksandr'):\n",
        "        return pd.Series(['Bolshtyanskiy', 'Aleksandr', 'Pavlovich', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Evgenybelopukhov' and row['Имя'] == '' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Belopukhov', 'Evgeniy', '', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Zykin Vladimir' and row['Имя'] == 'S.' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Zykin', 'Vladimir', 'S.', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Sergey Alexandrovich' and row['Имя'] == 'Klinovenko' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Klinovenko', 'Sergey', 'Alexandrovich', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Antonovich' and row['Имя'] == 'Suvyrin' and row['Отчество'] == 'Georgii'):\n",
        "        return pd.Series(['Suvyrin', 'Georgii', 'Antonovich', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Zliumazhanova' and row['Имя'] == 'Samal' and row['Отчество'] == 'S.'):\n",
        "        return pd.Series(['Zhumazhanova', 'Samal', 'S.', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Valerievich' and row['Имя'] == 'Pletnev' and row['Отчество'] == 'Leonid'):\n",
        "        return pd.Series(['Pletnev', 'Leonid', 'Valerievich', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Alexander Evgenievich' and row['Имя'] == 'Samotuga' and row['Отчество'] == ''):\n",
        "        return pd.Series(['Samotuga', 'Alexander', 'Evgenievich', 'Omsk State Technical University'])\n",
        "    elif (row['Фамилия'] == 'Nikitin Omsk' and row['Имя'] == 'K.' and row['Отчество'] == 'I.'):\n",
        "        return pd.Series(['Nikitin', 'K.', 'I.', 'Omsk State Technical University'])\n",
        "\n",
        "    else:\n",
        "        # Возвращаем оригинальные значения\n",
        "        return pd.Series([row['Фамилия'], row['Имя'], row['Отчество'], row['Университет']])\n",
        "\n",
        "# Применение функции для изменения порядка\n",
        "merged_data[['Фамилия', 'Имя', 'Отчество', 'Университет']] = merged_data.apply(reorder_special_cases, axis=1)\n",
        "\n",
        "# Обработка пустых значений в колонке 'Отечество'\n",
        "merged_data['Отчество'] = merged_data['Отчество'].fillna('')\n",
        "\n",
        "# Сохранение результата в новый CSV файл\n",
        "output_file = 'merged_data.csv'\n",
        "merged_data.to_csv(output_file, index=False, encoding='utf-8-sig')\n",
        "\n",
        "print(f'Данные успешно сохранены в {output_file}')\n",
        "merged_data = pd.read_csv(output_file, encoding='utf-8-sig')\n",
        "\n",
        "# Функция для удаления точек из строк\n",
        "def remove_dots(value):\n",
        "    return value.replace('.', '') if isinstance(value, str) else value\n",
        "\n",
        "# Применение функции ко всем столбцам DataFrame\n",
        "merged_data = merged_data.applymap(remove_dots)\n",
        "\n",
        "# Сохранение результата обратно в CSV файл\n",
        "merged_data.to_csv(output_file, index=False, encoding='utf-8-sig')\n",
        "\n",
        "print(f'Данные успешно обновлены в {output_file}, все точки удалены.')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1SY06__UFHUi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Загрузка данных из CSV файла\n",
        "output_file = 'merged_data.csv'\n",
        "merged_data = pd.read_csv(output_file, encoding='utf-8-sig')\n",
        "\n",
        "# Функция для удаления точек из строк\n",
        "def remove_dots(value):\n",
        "    return value.replace('.', '') if isinstance(value, str) else value\n",
        "\n",
        "# Применение функции ко всем столбцам DataFrame\n",
        "merged_data = merged_data.applymap(remove_dots)\n",
        "\n",
        "# Сохранение результата обратно в CSV файл\n",
        "merged_data.to_csv(output_file, index=False, encoding='utf-8-sig')\n",
        "\n",
        "print(f'Данные успешно обновлены в {output_file}, все точки удалены.')\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AWSgCDBmFIO6",
        "outputId": "ef51400a-87ca-4cd0-9876-ebdc59a6cdcd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Данные успешно обновлены в merged_data.csv, все точки удалены.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-1-84249a5cced0>:12: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
            "  merged_data = merged_data.applymap(remove_dots)\n"
          ]
        }
      ]
    }
  ]
}